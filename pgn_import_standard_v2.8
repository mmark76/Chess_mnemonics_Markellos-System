<!DOCTYPE html>
<html lang="el">
<head>
  <meta charset="utf-8" />
  <title>PGN → SAN/FEN (Standard v2.8)</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    body { font-family: Arial, sans-serif; margin: 16px; }
    textarea { width: 100%; height: 140px; margin-bottom: 8px; font-family: monospace; }
    button, input[type="file"] { margin: 6px 6px 6px 0; }
    .section-title { margin-top: 18px; margin-bottom: 6px; }
    .table-container {
      border: 1px solid #ccc;
      height: 340px;
      overflow: auto;
      padding: 6px;
      background: #fafafa;
    }
    table { border-collapse: collapse; width: 100%; font-size: 13px; }
    th, td { border: 1px solid #ddd; padding: 6px; text-align: center; white-space: nowrap; }
    th { background: #efefef; font-weight: bold; position: sticky; top: 0; z-index: 2; }
    tr.row-hover td { background: #fff7d6; }
    tr.row-selected td { background: #d6f7ff; }
    #status { margin-top: 8px; color: #555; }
    @media (max-width:800px){ .table-container{height:260px;} th,td{font-size:12px;padding:4px;} }
  </style>

  <!-- Τοπική βιβλιοθήκη chess.js: βάλ' το στο ίδιο φάκελο με αυτό το html -->
  <script src="./chess.min.js"></script>
</head>
<body>

<h2>PGN → SAN / FEN — Standard v2.8</h2>

<div>
  <label for="pgnText">Επικόλλησε PGN εδώ:</label><br>
  <textarea id="pgnText" placeholder="Επικόλλησε PGN..."></textarea><br>
  <button onclick="parseFromTextarea()">Ανάλυση PGN (textarea)</button>
  <input type="file" id="pgnFile" accept=".pgn,.txt" />
  <button onclick="downloadFEN()">Κατέβασε FEN JSON</button>
  <div id="status">Έτοιμο</div>
</div>

<div class="section-title"><h3>Πίνακας SAN (πάνω)</h3></div>
<div id="sanContainer" class="table-container" aria-label="SAN table container">
  <table id="sanTable">
    <thead>
      <tr><th>#</th><th>SAN</th><th>Side</th><th>Piece</th><th>To</th><th>FEN</th></tr>
    </thead>
    <tbody id="sanBody">
      <tr><td colspan="6">Καμία κίνηση ακόμα…</td></tr>
    </tbody>
  </table>
</div>

<div class="section-title"><h3>Πίνακας PAO (κάτω)</h3></div>
<div id="paoContainer" class="table-container" aria-label="PAO table container">
  <table id="paoTable">
    <!-- Οι 3 πρώτες στήλες είναι IDENTICAL με τον SAN -->
    <thead>
      <tr><th>#</th><th>SAN</th><th>Side</th><th>Locus (Linear MP)</th><th>PAO</th></tr>
    </thead>
    <tbody id="paoBody">
      <tr><td colspan="5">Καμία κίνηση ακόμα…</td></tr>
    </tbody>
  </table>
</div>

<script>
/* =========================
   Loader βιβλιοθηκών (fetch -> inline fallback)
   ========================= */
let libraries = null;

function tryInlineLibraries() {
  const el = document.getElementById('libraries-json');
  if (!el) return false;
  try {
    libraries = JSON.parse(el.textContent);
    console.log("Libraries (inline):", libraries);
    return true;
  } catch (e) {
    console.warn("Inline libraries parse failed", e);
    return false;
  }
}

fetch("libraries.json")
  .then(r => { if (!r.ok) throw new Error(r.status + " " + r.statusText); return r.json(); })
  .then(data => { libraries = data; console.log("Libraries fetched:", libraries); })
  .catch(err => {
    console.warn("Fetch libraries.json failed:", err);
    if (!tryInlineLibraries()) {
      const s = document.getElementById('status');
      if (s) { s.textContent = "Αποτυχία φόρτωσης libraries.json (θα χρειαστεί inline ή το αρχείο να είναι στον ίδιο φάκελο)"; s.style.color = "#c00"; }
    } else {
      const s = document.getElementById('status');
      if (s) { s.textContent = "Libraries loaded (inline fallback)"; s.style.color = "#0a0"; }
    }
  });

/* =========================
   Utilities
   ========================= */
function escapeHtml(s){ return String(s).replace(/[&<>"']/g, m=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m])); }

/* =========================
   PGN -> tokens -> movesData
   movesData: [{index, moveNumDisplay, san, side, piece, to, fen, movePair}]
   ========================= */
function getSANHistoryFromPGN(pgn){
  const lines = pgn.split(/\r?\n/).filter(Boolean).filter(l=>!l.startsWith('['));
  const text = lines.join(' ');
  const cleaned = text.replace(/\{[^}]*\}/g,'').replace(/\d+\.+/g,'').trim();
  const toks = cleaned.split(/\s+/).filter(Boolean);
  return toks.filter(t=>!/^(1-0|0-1|1\/2-1\/2)$/.test(t));
}

function buildMovesDataFromTokens(tokens){
  const replay = new Chess();
  const moves = [];
  let moveNo = 0;
  for (let i=0;i<tokens.length;i++){
    const san = tokens[i];
    const move = replay.move(san, {sloppy:true});
    if (!move) continue;
    if (move.color === 'w') moveNo++;
    const moveNumDisplay = (move.color === 'w') ? String(moveNo) : (String(moveNo) + '...');
    const sideLabel = move.color === 'w' ? 'Λευκά' : 'Μαύρα';
    moves.push({
      index: i,
      moveNumDisplay,
      san,
      side: sideLabel,
      piece: (move.piece || 'p').toUpperCase(),
      to: move.to,
      fen: replay.fen(),
      movePair: Math.floor(i/2) + 1
    });
  }
  return moves;
}

/* =========================
   Fill SAN table
   ========================= */
function fillSanTable(movesData){
  const sanBody = document.getElementById('sanBody');
  sanBody.innerHTML = '';
  if (!movesData || movesData.length === 0) {
    sanBody.innerHTML = '<tr><td colspan="6">Καμία κίνηση ακόμα…</td></tr>';
    return;
  }
  movesData.forEach(m => {
    const tr = document.createElement('tr');
    tr.setAttribute('data-index', String(m.index));
    tr.innerHTML = `
      <td>${escapeHtml(m.moveNumDisplay)}</td>
      <td>${escapeHtml(m.san)}</td>
      <td>${escapeHtml(m.side)}</td>
      <td>${escapeHtml(m.piece)}</td>
      <td>${escapeHtml(m.to)}</td>
      <td><small>${escapeHtml(m.fen)}</small></td>
    `;
    sanBody.appendChild(tr);
  });
  attachRowEvents();
}

/* =========================
   Fill PAO table using same movesData (first 3 cols identical)
   ========================= */
function fillPaoTableFromMoves(movesData){
  const paoBody = document.getElementById('paoBody');
  if (!movesData || movesData.length === 0) {
    paoBody.innerHTML = '<tr><td colspan="5">Καμία κίνηση ακόμα…</td></tr>';
    return;
  }
  if (!libraries || !libraries.Library7) {
    paoBody.innerHTML = '<tr><td colspan="5">Δεν φορτώθηκαν οι βιβλιοθήκες (Library7)</td></tr>';
    return;
  }

  paoBody.innerHTML = '';

  const pieceMap = { p:'1', n:'2', b:'3', r:'4', q:'5', k:'6' };
  const fileMap  = { a:'1', b:'2', c:'3', d:'4', e:'5', f:'6', g:'7', h:'8' };
  const pieceLetter = { p:'P', n:'N', b:'B', r:'R', q:'Q', k:'K' };

  movesData.forEach(m => {
    // build code
    const pLetter = (m.piece || 'P').toLowerCase();
    const p = pieceMap[pLetter] || '0';
    const f = fileMap[(m.to||'a')[0]] || '0';
    const r = (m.to||'1')[1] || '0';
    const rawCode = p + f + r;
    const isMaskedTriple = (p==='6' && f==='6' && r==='6');
    const displayCode = isMaskedTriple ? ((pieceLetter[pLetter] || '') + m.to) : rawCode;

    // Library7 lookup
    const person = (libraries.Library7.Persons && libraries.Library7.Persons[p]) || '';
    const action = (libraries.Library7.Actions && libraries.Library7.Actions[f]) || '';
    const object = (libraries.Library7.Objects && libraries.Library7.Objects[r]) || '';
    const phrase = `${person} ${action} με ${object}`;

    const cellHtml = `
      <div><strong>Κωδικός:</strong> ${escapeHtml(displayCode)} &nbsp;
           <small>(${escapeHtml((pieceLetter[pLetter]||'') + m.to)})</small></div>
      <div><strong>P:</strong> ${escapeHtml(person)} &nbsp;
           <strong>A:</strong> ${escapeHtml(action)} &nbsp;
           <strong>O:</strong> ${escapeHtml(object)}</div>
      <div><em>${escapeHtml(phrase)}</em></div>
    `;

    // Locus lookup via Library1 (wrap-around)
    const L1 = libraries.Library1 || {};
    const L1Count = Object.keys(L1).length || 0;
    const idx = L1Count ? ((m.movePair - 1) % L1Count) + 1 : m.movePair;
    const locusName = L1[String(idx)] || '';
    const locusDisplay = locusName ? `${idx} — ${locusName}` : String(idx);

    const tr = document.createElement('tr');
    tr.setAttribute('data-index', String(m.index));
    // first 3 cols are identical to SAN
    tr.innerHTML = `
      <td>${escapeHtml(m.moveNumDisplay)}</td>
      <td>${escapeHtml(m.san)}</td>
      <td>${escapeHtml(m.side)}</td>
      <td style="text-align:left">${escapeHtml(locusDisplay)}</td>
      <td style="text-align:left">${cellHtml}</td>
    `;
    paoBody.appendChild(tr);
  });

  attachRowEvents();
}

/* =========================
   Row events (hover/click)
   ========================= */
function attachRowEvents(){
  // SAN rows
  const sanRows = document.querySelectorAll('#sanBody tr[data-index]');
  sanRows.forEach(tr=>{
    const idx = tr.getAttribute('data-index');
    const paoTr = document.querySelector(`#paoBody tr[data-index="${idx}"]`);
    tr.onmouseenter = ()=>{ tr.classList.add('row-hover'); if(paoTr) paoTr.classList.add('row-hover'); };
    tr.onmouseleave = ()=>{ tr.classList.remove('row-hover'); if(paoTr) paoTr.classList.remove('row-hover'); };
    tr.onclick = ()=>{
      const already = tr.classList.contains('row-selected');
      document.querySelectorAll('tr.row-selected').forEach(r=>r.classList.remove('row-selected'));
      if (!already) { tr.classList.add('row-selected'); if(paoTr) paoTr.classList.add('row-selected'); }
      if (paoTr) paoTr.scrollIntoView({behavior:'smooth',block:'center'});
    };
  });

  // PAO rows
  const paoRows = document.querySelectorAll('#paoBody tr[data-index]');
  paoRows.forEach(tr=>{
    const idx = tr.getAttribute('data-index');
    const sanTr = document.querySelector(`#sanBody tr[data-index="${idx}"]`);
    tr.onmouseenter = ()=>{ tr.classList.add('row-hover'); if(sanTr) sanTr.classList.add('row-hover'); };
    tr.onmouseleave = ()=>{ tr.classList.remove('row-hover'); if(sanTr) sanTr.classList.remove('row-hover'); };
    tr.onclick = ()=>{
      const already = tr.classList.contains('row-selected');
      document.querySelectorAll('tr.row-selected').forEach(r=>r.classList.remove('row-selected'));
      if (!already) { tr.classList.add('row-selected'); if(sanTr) sanTr.classList.add('row-selected'); }
      if (sanTr) sanTr.scrollIntoView({behavior:'smooth',block:'center'});
    };
  });
}

/* =========================
   Scroll sync between containers
   ========================= */
(function setupScrollSync(){
  const sanC = document.getElementById('sanContainer');
  const paoC = document.getElementById('paoContainer');
  if (!sanC || !paoC) return;
  let syncing = false;
  sanC.addEventListener('scroll', ()=>{ if(syncing) return; syncing=true; paoC.scrollTop = sanC.scrollTop; setTimeout(()=>syncing=false,50); });
  paoC.addEventListener('scroll', ()=>{ if(syncing) return; syncing=true; sanC.scrollTop = paoC.scrollTop; setTimeout(()=>syncing=false,50); });
})();

/* =========================
   Entry points & file reader
   ========================= */
function parseFromTextarea(){
  const text = document.getElementById('pgnText').value || '';
  try {
    const tokens = getSANHistoryFromPGN(text);
    const movesData = buildMovesDataFromTokens(tokens);
    fillSanTable(movesData);
    fillPaoTableFromMoves(movesData);
    const s=document.getElementById('status'); if(s){ s.textContent="OK: Ανάλυση PGN από textarea"; s.style.color="#0a0"; }
  } catch(e){
    const s=document.getElementById('status'); if(s){ s.textContent="Αποτυχία ανάλυσης PGN"; s.style.color="#c00"; } console.error(e);
  }
}

document.getElementById('pgnFile').addEventListener('change', function(ev){
  const file = ev.target.files[0]; if(!file) return;
  const reader = new FileReader();
  reader.onload = function(e){
    try {
      const text = e.target.result || '';
      const tokens = getSANHistoryFromPGN(text);
      const movesData = buildMovesDataFromTokens(tokens);
      fillSanTable(movesData);
      fillPaoTableFromMoves(movesData);
      const s=document.getElementById('status'); if(s){ s.textContent="OK: Ανάλυση PGN από αρχείο"; s.style.color="#0a0"; }
    } catch(err){ const s=document.getElementById('status'); if(s){ s.textContent="Αποτυχία ανάλυσης PGN"; s.style.color="#c00"; } console.error(err); }
  };
  reader.readAsText(file,'utf-8');
});

function downloadFEN(){
  try {
    const sanBody = document.getElementById('sanBody');
    const rows = Array.from(sanBody.querySelectorAll('tr[data-index]'));
    const data = rows.map(r=>{
      const cols = r.querySelectorAll('td');
      return {
        moveNo: cols[0].textContent.trim(),
        san: cols[1].textContent.trim(),
        side: cols[2].textContent.trim(),
        piece: cols[3].textContent.trim(),
        to: cols[4].textContent.trim(),
        fen: cols[5].textContent.trim()
      };
    });
    const blob = new Blob([JSON.stringify({moves:data}, null, 2)], {type:'application/json'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a'); a.href = url; a.download = 'fen_moves.json'; a.click();
    URL.revokeObjectURL(url);
  } catch(e){ console.error(e); alert('Σφάλμα κατά τη δημιουργία του αρχείου.'); }
}
</script>

<!-- Προαιρετικό inline JSON fallback (απενεργοποιημένο/placeholder)
     Αν δεν θες ξεχωριστό libraries.json, επικόλλησε εδώ το JSON και
     αφαίρεσε το σχόλιο.
<script type="application/json" id="libraries-json">
{
  "Library1": { "1": "Είσοδος", "2": "Γραμματοκιβώτιο", "3": "Κήπος", "4":"Παράθυρο", "5":"Γραφείο", "64":"Εκτυπωτής" },
  "Library7": {
    "Persons": { "1":"Στρατιώτης","2":"Ιππέας","3":"Επίσκοπος","4":"Πύργος","5":"Βασίλισσα","6":"Βασιλιάς" },
    "Actions": { "1":"Χτυπάει","2":"Τρέχει","3":"Κρύπτεται","4":"Επιτίθεται","5":"Ανακοινώνει","6":"Κάθεται" },
    "Objects": { "1":"Σημαία","2":"Θρόνος","3":"Τσεκούρι","4":"Στέμμα","5":"Καρδιά","6":"Τραπέζι","8":"Βιβλίο" }
  }
}
</script>
-->

</body>
</html>
